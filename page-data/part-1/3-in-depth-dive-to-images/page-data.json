{"componentChunkName":"component---src-templates-course-content-template-js","path":"/part-1/3-in-depth-dive-to-images","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Images are the basic building blocks for containers and other images. When you \"containerize\" an application you work towards creating the image."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By learning what images are and how to create them you are ready to start utilizing containers in your own projects."}]},{"type":"element","tagName":"h2","properties":{"id":"where-do-the-images-come-from","style":"position:relative;"},"children":[{"type":"text","value":"Where do the images come from?"},{"type":"element","tagName":"a","properties":{"href":"#where-do-the-images-come-from","ariaLabel":"where do the images come from permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When running a command such as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run hello-world"}]},{"type":"text","value":", Docker will automatically search "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub"}]},{"type":"text","value":" for the image if it is not found locally."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This means that we can pull and run any public image from Docker's servers. For example‚ if we wanted to start an instance of the PostgreSQL database, we could just run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run postgres"}]},{"type":"text","value":", which would pull and run "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/_/postgres/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://hub.docker.com/_/postgres/"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can search for images in the Docker Hub with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker search"}]},{"type":"text","value":". Try running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker search hello-world"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The search finds plenty of results, and prints each image's name, short description, amount of stars, and \"official\" and \"automated\" statuses."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker search hello-world\n\n  NAME                         DESCRIPTION    STARS   OFFICIAL   AUTOMATED\n  hello-world                  Hello World!…  699     [OK]\n  kitematic/hello-world-nginx  A light-weig…  112\n  tutum/hello-world            Image to tes…  56                 [OK]\n  ..."}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's examine the list."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first result, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hello-world"}]},{"type":"text","value":", is an official image. "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/docker-hub/official_images/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Official images"}]},{"type":"text","value":" are curated and reviewed by Docker, Inc. and are usually actively maintained by the authors. They are built from repositories in the "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/docker-library","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"docker-library"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When browsing the CLI's search results, you can recognize an official image from the \"[OK]\" in the \"OFFICIAL\" column and also from the fact that the image's name has no prefix (aka organization/user). When browsing Docker Hub, the page will show \"Docker Official Images\" as the repository, instead of a user or organization. For example, see the "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/_/hello-world/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub page"}]},{"type":"text","value":" of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"hello-world"}]},{"type":"text","value":" image."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The third result, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"tutum/hello-world"}]},{"type":"text","value":", is marked as \"automated\". This means that the image is "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/docker-hub/builds/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"automatically built"}]},{"type":"text","value":" from the source repository. Its "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/r/tutum/hello-world/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub page"}]},{"type":"text","value":" shows its previous \"Builds\" and a link to the image's \"Source Repository\" (in this case, to GitHub) from which Docker Hub builds the image."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The second result, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"kitematic/hello-world-nginx"}]},{"type":"text","value":", is neither an official nor an automated image.\nWe can't know what the image is built from, since its "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/r/kitematic/hello-world-nginx/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub page"}]},{"type":"text","value":" has no links to any repositories. The only thing its Docker Hub page reveals is that the image is 6 years old. Even if the image's \"Overview\" section had links to a repository, we would have no guarantees that the published image was built from that source."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are also other Docker registries competing with Docker Hub, such as "},{"type":"element","tagName":"a","properties":{"href":"https://quay.io/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"quay"}]},{"type":"text","value":". However, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker search"}]},{"type":"text","value":" will only search from Docker Hub, so we will need to use the registry's web pages to search for images. Take a look at the page of "},{"type":"element","tagName":"a","properties":{"href":"https://quay.io/repository/nordstrom/hello-world","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"nordstrom/hello-world"}]},{"type":"text","value":" image on quay"}]},{"type":"text","value":". The page shows the command to use to pull the image, which reveals that we can also pull images from hosts other than Docker Hub:"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker pull quay.io/nordstrom/hello-world"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, if the host's name (here: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"quay.io"}]},{"type":"text","value":") is omitted, it will pull from Docker Hub by default."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"NOTE: Trying above command may fail giving manifest errors as default tag latest is not present in quay.io/nordstrom/hello-world image. Specifying correct tag for image will pull image without any errors, for ex.\n"},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker pull quay.io/nordstrom/hello-world:2.0"}]}]},{"type":"element","tagName":"h2","properties":{"id":"a-detailed-look-into-an-image","style":"position:relative;"},"children":[{"type":"text","value":"A detailed look into an image"},{"type":"element","tagName":"a","properties":{"href":"#a-detailed-look-into-an-image","ariaLabel":"a detailed look into an image permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's go back to a more relevant image than 'hello-world', the ubuntu image, one of the most common Docker images to use as a base for your own image."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's pull Ubuntu and look at the first lines:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker pull ubuntu\n  Using default tag: latest\n  latest: Pulling from library/ubuntu"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since we didn't specify a tag, Docker defaulted to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"latest"}]},{"type":"text","value":", which is usually the latest image built and pushed to the registry. "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"However"}]},{"type":"text","value":", in this case, the repository's README says that the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu:latest"}]},{"type":"text","value":" tag points to the \"latest LTS\" instead since that's the version recommended for general use."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Images can be tagged to save different versions of the same image. You define an image's tag by adding "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":":<tag>"}]},{"type":"text","value":" after the image's name."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ubuntu's "},{"type":"element","tagName":"a","properties":{"href":"https://hub.docker.com/r/library/ubuntu/tags/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Docker Hub page"}]},{"type":"text","value":" reveals that there's a tag named 18.04 which promises us that the image is based on Ubuntu 18.04. Let's pull that as well:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker pull ubuntu:18.04\n\n  18.04: Pulling from library/ubuntu\n  c2ca09a1934b: Downloading [============================================>      ]  34.25MB/38.64MB\n  d6c3619d2153: Download complete\n  0efe07335a04: Download complete\n  6b1bb01b3a3b: Download complete\n  43a98c187399: Download complete"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Images are composed of different layers that are downloaded in parallel to speed up the download. Images being made of layers also have other aspects and we will talk about them in part 3."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can also tag images locally for convenience, for example, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker tag ubuntu:18.04 ubuntu:bionic"}]},{"type":"text","value":" creates the tag "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu:bionic"}]},{"type":"text","value":" which refers to "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu:18.04"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Tagging is also a way to \"rename\" images. Run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker tag ubuntu:18.04 fav_distro:bionic"}]},{"type":"text","value":" and check "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker images"}]},{"type":"text","value":" to see what effects the command had."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To summarize, an image name may consist of 3 parts plus a tag. Usually like the following: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"registry/organisation/image:tag"}]},{"type":"text","value":". But may be as short as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ubuntu"}]},{"type":"text","value":", then the registry will default to docker hub, organisation to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"library"}]},{"type":"text","value":" and tag to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"latest"}]},{"type":"text","value":". The organisation may also be a user, but calling it an organisation may be more clear."}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.5: Sizes of images"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In a previous exercise we used "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"devopsdockeruh/simple-web-service:ubuntu"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is the same application but instead of ubuntu is using alpine: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"devopsdockeruh/simple-web-service:alpine"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Pull both images and compare the image sizes.\nGo inside the alpine container and make sure the secret message functionality is the same. Alpine version doesn't have bash but it has sh."}]}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.6: Hello Docker Hub"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run -it devopsdockeruh/pull_exercise"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It will wait for your input. Navigate through docker hub to find the docs and Dockerfile that was used to create the\nimage."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Read the Dockerfile and/or docs to learn what input will get the application to answer a \"secret message\"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Submit the secret message and command(s) given to get it as your answer."}]}]},{"type":"element","tagName":"h1","properties":{"id":"building-images","style":"position:relative;"},"children":[{"type":"text","value":"Building images"},{"type":"element","tagName":"a","properties":{"href":"#building-images","ariaLabel":"building images permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Finally, we get to build our own images and get to talk about "},{"type":"element","tagName":"a","properties":{"href":"https://docs.docker.com/engine/reference/builder/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Dockerfile"}]}]},{"type":"text","value":" and why it's so great."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dockerfile is simply a file that contains the build instructions for an image. You define what should be included in the image with different instructions. We'll learn about the best practices here by creating one."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's take a most simple application and containerize it first. Here is a script called \"hello.sh\""}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"hello.sh"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"sh"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-sh"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-sh"]},"children":[{"type":"text","value":"#!/bin/sh\n\necho \"Hello, docker!\""}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, we will test that it even works. Create the file, add execution permissions and run it:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ chmod +x hello.sh\n\n$ ./hello.sh\n  Hello, docker!"}]}]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If you're using windows you can skip these two and add chmod +x hello.sh to the Dockerfile."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"And now to create an image from it. We'll have to create the Dockerfile that declares all of the required dependencies. At least it depends on something that can run shell scripts. So I will choose alpine, it is a small Linux distribution and often used to create small images."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Even though we're using alpine here, you can use ubuntu during exercises. Ubuntu images by default contain more tools to debug what is wrong when something doesn't work. In part 3 we will talk more about why small images are important."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We will choose exactly which version of a given image we want to use. This makes it so that we don't accidentally update through a breaking change, and we know which images need updating when there are known security vulnerabilities in old images."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now create a file and name it \"Dockerfile\" and lets put the following instructions inside it:"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Dockerfile"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"dockerfile"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Start from the alpine image that is smaller but no fancy tools"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"FROM"}]},{"type":"text","value":" alpine"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"3.13\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Use /usr/src/app as our workdir. The following instructions will be executed in this location."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"WORKDIR"}]},{"type":"text","value":" /usr/src/app\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Copy the hello.sh file from this location to /usr/src/app/ creating /usr/src/app/hello.sh"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"COPY"}]},{"type":"text","value":" hello.sh .\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Alternatively, if we skipped chmod earlier, we can add execution permissions during the build."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# RUN chmod +x hello.sh"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# When running docker run the command will be ./hello.sh"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"CMD"}]},{"type":"text","value":" ./hello.sh"}]}]}]},{"type":"element","tagName":"text-box","properties":{"name":"Permission denied","variant":"hint"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you're now getting \"/bin/sh: ./hello.sh: Permission denied\" it's because the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"chmod +x hello.sh"}]},{"type":"text","value":" was skipped earlier. You can simply uncomment the RUN instruction between COPY and CMD instructions"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Great! By default "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker build"}]},{"type":"text","value":" will look for a file named Dockerfile. Now we can run "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker build"}]},{"type":"text","value":" with instructions where to build ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":") and give it a name ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-t <name>"}]},{"type":"text","value":"):"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker build . -t hello-docker\n  Sending build context to Docker daemon  54.78kB\n  Step 1/4 : FROM alpine:3.13\n   ---> d6e46aa2470d\n  Step 2/4 : WORKDIR /usr/src/app\n   ---> Running in bd0b4e349cb4\n  Removing intermediate container bd0b4e349cb4\n   ---> b382ca27c182\n  Step 3/4 : COPY hello.sh .\n   ---> 7fbc1b6e45ab\n  Step 4/4 : CMD ./hello.sh\n   ---> Running in 24f28f026b3f\n  Removing intermediate container 24f28f026b3f\n   ---> 444f21cf7bd5\n  Successfully built 444f21cf7bd5\n  Successfully tagged hello-docker:latest\n\n$ docker images\n  REPOSITORY            TAG          IMAGE ID       CREATED         SIZE\n  hello-docker          latest       444f21cf7bd5   2 minutes ago   5.57MB"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now executing the application is as simple as running "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run hello-docker"}]},{"type":"text","value":". Try it! During the build we see that there are multiple steps with hashes and intermediate containers. The steps here represent the layers so that each step is a new layer to the image."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"layers"}]},{"type":"text","value":" have multiple functions. We often try to limit the number of layers to save on storage space but layers can work as a cache during build time. If we just edit the last lines of Dockerfile the build command can start from the previous layer and skip straight to the section that has changed. COPY automatically detects changes in the files, so if we change the hello.sh it'll run from step 3/4, skipping 1 and 2. This can be used to create faster build pipelines. We'll talk more about optimization in part 3."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The intermediate containers are containers created from the image in which the command is executed. Then the changed state is stored into an image. We can do similiar task and a new layer manually. Create a new file called "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"additional.txt"}]},{"type":"text","value":" and let's copy it inside the container and learn new trick while we're at it! We'll need two terminals so I will label the lines with 1 and 2 representing the two."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"1 $ docker run -it hello-docker sh\n1 /usr/src/app #"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now we're inside of the container. We replaced the CMD we defined earlier with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"sh"}]},{"type":"text","value":" and used -i and -t to start the container so that we can interact with it. In the second terminal we will copy the file here."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"2 $ docker ps\n2   CONTAINER ID   IMAGE          COMMAND   CREATED         STATUS         PORTS     NAMES\n    9c06b95e3e85   hello-docker   \"sh\"      4 minutes ago   Up 4 minutes             zen_rosalind\n\n2 $ touch additional.txt\n2 $ docker cp ./additional.txt zen_rosalind:/usr/src/app/"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I created the file with touch right before copying it in. Now it's there and we can confirm that with ls:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"1 /usr/src/app # ls\n1 additional.txt  hello.sh"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Great! Now we've made a change to the container. We can use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"diff"}]},{"type":"text","value":" to check what has changed"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"2 $ docker diff zen_rosalind\n    C /usr\n    C /usr/src\n    C /usr/src/app\n    A /usr/src/app/additional.txt\n    C /root\n    A /root/.ash_history"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The character in front of the file name indicates the type of the change in the container's filesystem: A = added, D = deleted, C = changed. The additional.txt was created and our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"ls"}]},{"type":"text","value":" created .ash_history. Next we will save the changes as a new layer!"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"2 $ docker commit zen_rosalind hello-docker-additional\n    sha256:2f63baa355ce5976bf89fe6000b92717f25dd91172aed716208e784315bfc4fd\n2 $ docker images\n    REPOSITORY                   TAG          IMAGE ID       CREATED          SIZE\n    hello-docker-additional      latest       2f63baa355ce   3 seconds ago    5.57MB\n    hello-docker                 latest       444f21cf7bd5   31 minutes ago   5.57MB"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We will actually never use docker commit again. This is because defining the changes to the Dockerfile is much more sustainable method of managing changes. No magic actions or scripts, just a Dockerfile that can be version controlled."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let's do just that and create hello-docker with v2 tag that includes additional.txt."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Dockerfile"}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"dockerfile"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-dockerfile"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Start from the alpine image"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"FROM"}]},{"type":"text","value":" alpine"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"3.13\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Use /usr/src/app as our workdir. The following instructions will be executed in this location."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"WORKDIR"}]},{"type":"text","value":" /usr/src/app\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Copy the hello.sh file from this location to /usr/src/app/ creating /usr/src/app/hello.sh."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"COPY"}]},{"type":"text","value":" hello.sh .\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Execute a command with `/bin/sh -c` prefix."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"RUN"}]},{"type":"text","value":" touch additional.txt\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# When running docker run the command will be ./hello.sh"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"CMD"}]},{"type":"text","value":" ./hello.sh"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Build it with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker build . -t hello-docker:v2"}]},{"type":"text","value":" and we are done! Let's compare the output of ls:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"$ docker run hello-docker-additional ls\n  additional.txt\n  hello.sh\n\n$ docker run hello-docker:v2 ls\n  additional.txt\n  hello.sh"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now we know that all instructions in a Dockerfile "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"except"}]},{"type":"text","value":" CMD (and one other that we will learn about soon) are executed during build time. "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"CMD"}]},{"type":"text","value":" is executed when we call docker run, unless we overwrite it."}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.7: Two line Dockerfile"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"By default our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"devopsdockeruh/simple-web-service:alpine"}]},{"type":"text","value":" doesn't have a CMD. It instead uses "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"ENTRYPOINT"}]},{"type":"text","value":" to declare which application is run."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We'll talk more about "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"ENTRYPOINT"}]},{"type":"text","value":" in the next section, but you already know that the last argument in "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run"}]},{"type":"text","value":" can be used to give command."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you might've noticed it doesn't start the web service even though the name is \"simple-web-service\". A command is needed to start the server!"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Try "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"docker run devopsdockeruh/simple-web-service:alpine hello"}]},{"type":"text","value":". The application reads the argument but will inform that hello isn't accepted."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In this exercise create a Dockerfile and use FROM and CMD to create a brand new image that automatically runs the server.\nTag the new image as \"web-server\""}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Return the Dockerfile and the command you used to run the container."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Running the built \"web-server\" image should look like this:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"console"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-console"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-console"]},"children":[{"type":"text","value":"$ docker run web-server\n[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.\n\n[GIN-debug] [WARNING] Running in \"debug\" mode. Switch to \"release\" mode in production.\n- using env:   export GIN_MODE=release\n- using code:  gin.SetMode(gin.ReleaseMode)\n\n[GIN-debug] GET    /*path                    --> server.Start.func1 (3 handlers)\n[GIN-debug] Listening and serving HTTP on :8080"}]}]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We don't have any method of accessing the web service yet. As such confirming that the console output is the same will suffice."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The exercise title may be a useful hint here."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"exercise","properties":{"name":"Exercise 1.8: Image for script"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can improve our previous solutions now that we know how to create and build a Dockerfile."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Create a new file on your local machine with and append the script we used previously into that file"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"echo \"Input website:\"; read website; echo \"Searching..\"; sleep 1; curl http://$website;"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Create a Dockerfile for a new image that starts from ubuntu:20.04 and add instructions to install curl into that image. Then add instructions to copy the script file into that image and finally set it to run on container start using CMD."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After you have filled the Dockerfile, build the image with the tag \"curler\"."}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If you are getting permission denied, use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"chmod"}]},{"type":"text","value":" to give permission to run the script."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following should now work:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"bash"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-bash"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"$ docker run -it curler\n\n  Input website:\n  helsinki.fi\n  Searching"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":".."}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"!"}]},{"type":"text","value":"DOCTYPE HTML PUBLIC "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"-//IETF//DTD HTML 2.0//EN\""}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"html"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"head"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"title"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"301"}]},{"type":"text","value":" Moved Permanently"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/title"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/head"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"body"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"h"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","file-descriptor","important"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":">"}]},{"type":"text","value":"Moved Permanently"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/h"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","file-descriptor","important"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"p"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"The document has moved "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"a "},{"type":"element","tagName":"span","properties":{"className":["token","assign-left","variable"]},"children":[{"type":"text","value":"href"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"https://www.helsinki.fi/\""}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"here"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/a"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"."},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/p"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/body"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":"/html"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Submit the Dockerfile."}]}]}]},"html":"<div><p>Images are the basic building blocks for containers and other images. When you \"containerize\" an application you work towards creating the image.</p><p>By learning what images are and how to create them you are ready to start utilizing containers in your own projects.</p><h2 id=\"where-do-the-images-come-from\" style=\"position:relative;\">Where do the images come from?<a href=\"#where-do-the-images-come-from\" aria-label=\"where do the images come from permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>When running a command such as <code class=\"language-text\">docker run hello-world</code>, Docker will automatically search <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub</a> for the image if it is not found locally.</p><p>This means that we can pull and run any public image from Docker's servers. For example‚ if we wanted to start an instance of the PostgreSQL database, we could just run <code class=\"language-text\">docker run postgres</code>, which would pull and run <a href=\"https://hub.docker.com/_/postgres/\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com/_/postgres/</a>.</p><p>We can search for images in the Docker Hub with <code class=\"language-text\">docker search</code>. Try running <code class=\"language-text\">docker search hello-world</code>.</p><p>The search finds plenty of results, and prints each image's name, short description, amount of stars, and \"official\" and \"automated\" statuses.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker search hello-world\n\n  NAME                         DESCRIPTION    STARS   OFFICIAL   AUTOMATED\n  hello-world                  Hello World!…  699     [OK]\n  kitematic/hello-world-nginx  A light-weig…  112\n  tutum/hello-world            Image to tes…  56                 [OK]\n  ...</code></pre></div><p>Let's examine the list.</p><p>The first result, <code class=\"language-text\">hello-world</code>, is an official image. <a href=\"https://docs.docker.com/docker-hub/official_images/\" target=\"_blank\" rel=\"noopener noreferrer\">Official images</a> are curated and reviewed by Docker, Inc. and are usually actively maintained by the authors. They are built from repositories in the <a href=\"https://github.com/docker-library\" target=\"_blank\" rel=\"noopener noreferrer\">docker-library</a>.</p><p>When browsing the CLI's search results, you can recognize an official image from the \"[OK]\" in the \"OFFICIAL\" column and also from the fact that the image's name has no prefix (aka organization/user). When browsing Docker Hub, the page will show \"Docker Official Images\" as the repository, instead of a user or organization. For example, see the <a href=\"https://hub.docker.com/_/hello-world/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub page</a> of the <code class=\"language-text\">hello-world</code> image.</p><p>The third result, <code class=\"language-text\">tutum/hello-world</code>, is marked as \"automated\". This means that the image is <a href=\"https://docs.docker.com/docker-hub/builds/\" target=\"_blank\" rel=\"noopener noreferrer\">automatically built</a> from the source repository. Its <a href=\"https://hub.docker.com/r/tutum/hello-world/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub page</a> shows its previous \"Builds\" and a link to the image's \"Source Repository\" (in this case, to GitHub) from which Docker Hub builds the image.</p><p>The second result, <code class=\"language-text\">kitematic/hello-world-nginx</code>, is neither an official nor an automated image.\nWe can't know what the image is built from, since its <a href=\"https://hub.docker.com/r/kitematic/hello-world-nginx/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub page</a> has no links to any repositories. The only thing its Docker Hub page reveals is that the image is 6 years old. Even if the image's \"Overview\" section had links to a repository, we would have no guarantees that the published image was built from that source.</p><p>There are also other Docker registries competing with Docker Hub, such as <a href=\"https://quay.io/\" target=\"_blank\" rel=\"noopener noreferrer\">quay</a>. However, <code class=\"language-text\">docker search</code> will only search from Docker Hub, so we will need to use the registry's web pages to search for images. Take a look at the page of <a href=\"https://quay.io/repository/nordstrom/hello-world\" target=\"_blank\" rel=\"noopener noreferrer\">the <code class=\"language-text\">nordstrom/hello-world</code> image on quay</a>. The page shows the command to use to pull the image, which reveals that we can also pull images from hosts other than Docker Hub:</p><p><code class=\"language-text\">docker pull quay.io/nordstrom/hello-world</code></p><p>So, if the host's name (here: <code class=\"language-text\">quay.io</code>) is omitted, it will pull from Docker Hub by default.</p><p>NOTE: Trying above command may fail giving manifest errors as default tag latest is not present in quay.io/nordstrom/hello-world image. Specifying correct tag for image will pull image without any errors, for ex.\n<code class=\"language-text\">docker pull quay.io/nordstrom/hello-world:2.0</code></p><h2 id=\"a-detailed-look-into-an-image\" style=\"position:relative;\">A detailed look into an image<a href=\"#a-detailed-look-into-an-image\" aria-label=\"a detailed look into an image permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>Let's go back to a more relevant image than 'hello-world', the ubuntu image, one of the most common Docker images to use as a base for your own image.</p><p>Let's pull Ubuntu and look at the first lines:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker pull ubuntu\n  Using default tag: latest\n  latest: Pulling from library/ubuntu</code></pre></div><p>Since we didn't specify a tag, Docker defaulted to <code class=\"language-text\">latest</code>, which is usually the latest image built and pushed to the registry. <strong>However</strong>, in this case, the repository's README says that the <code class=\"language-text\">ubuntu:latest</code> tag points to the \"latest LTS\" instead since that's the version recommended for general use.</p><p>Images can be tagged to save different versions of the same image. You define an image's tag by adding <code class=\"language-text\">:&lt;tag&gt;</code> after the image's name.</p><p>Ubuntu's <a href=\"https://hub.docker.com/r/library/ubuntu/tags/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker Hub page</a> reveals that there's a tag named 18.04 which promises us that the image is based on Ubuntu 18.04. Let's pull that as well:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker pull ubuntu:18.04\n\n  18.04: Pulling from library/ubuntu\n  c2ca09a1934b: Downloading [============================================&gt;      ]  34.25MB/38.64MB\n  d6c3619d2153: Download complete\n  0efe07335a04: Download complete\n  6b1bb01b3a3b: Download complete\n  43a98c187399: Download complete</code></pre></div><p>Images are composed of different layers that are downloaded in parallel to speed up the download. Images being made of layers also have other aspects and we will talk about them in part 3.</p><p>We can also tag images locally for convenience, for example, <code class=\"language-text\">docker tag ubuntu:18.04 ubuntu:bionic</code> creates the tag <code class=\"language-text\">ubuntu:bionic</code> which refers to <code class=\"language-text\">ubuntu:18.04</code>.</p><p>Tagging is also a way to \"rename\" images. Run <code class=\"language-text\">docker tag ubuntu:18.04 fav_distro:bionic</code> and check <code class=\"language-text\">docker images</code> to see what effects the command had.</p><p>To summarize, an image name may consist of 3 parts plus a tag. Usually like the following: <code class=\"language-text\">registry/organisation/image:tag</code>. But may be as short as <code class=\"language-text\">ubuntu</code>, then the registry will default to docker hub, organisation to <em>library</em> and tag to <em>latest</em>. The organisation may also be a user, but calling it an organisation may be more clear.</p><exercise name=\"Exercise 1.5: Sizes of images\"><p>In a previous exercise we used <code class=\"language-text\">devopsdockeruh/simple-web-service:ubuntu</code>.</p><p>Here is the same application but instead of ubuntu is using alpine: <code class=\"language-text\">devopsdockeruh/simple-web-service:alpine</code>.</p><p>Pull both images and compare the image sizes.\nGo inside the alpine container and make sure the secret message functionality is the same. Alpine version doesn't have bash but it has sh.</p></exercise><exercise name=\"Exercise 1.6: Hello Docker Hub\"><p>Run <code class=\"language-text\">docker run -it devopsdockeruh/pull_exercise</code>.</p><p>It will wait for your input. Navigate through docker hub to find the docs and Dockerfile that was used to create the\nimage.</p><p>Read the Dockerfile and/or docs to learn what input will get the application to answer a \"secret message\".</p><p>Submit the secret message and command(s) given to get it as your answer.</p></exercise><h1 id=\"building-images\" style=\"position:relative;\">Building images<a href=\"#building-images\" aria-label=\"building images permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1><p>Finally, we get to build our own images and get to talk about <a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"noopener noreferrer\"><code class=\"language-text\">Dockerfile</code></a> and why it's so great.</p><p>Dockerfile is simply a file that contains the build instructions for an image. You define what should be included in the image with different instructions. We'll learn about the best practices here by creating one.</p><p>Let's take a most simple application and containerize it first. Here is a script called \"hello.sh\"</p><p><strong>hello.sh</strong></p><div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">#!/bin/sh\n\necho &quot;Hello, docker!&quot;</code></pre></div><p>First, we will test that it even works. Create the file, add execution permissions and run it:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ chmod +x hello.sh\n\n$ ./hello.sh\n  Hello, docker!</code></pre></div><ul>\n<li>If you're using windows you can skip these two and add chmod +x hello.sh to the Dockerfile.</li>\n</ul><p>And now to create an image from it. We'll have to create the Dockerfile that declares all of the required dependencies. At least it depends on something that can run shell scripts. So I will choose alpine, it is a small Linux distribution and often used to create small images.</p><p>Even though we're using alpine here, you can use ubuntu during exercises. Ubuntu images by default contain more tools to debug what is wrong when something doesn't work. In part 3 we will talk more about why small images are important.</p><p>We will choose exactly which version of a given image we want to use. This makes it so that we don't accidentally update through a breaking change, and we know which images need updating when there are known security vulnerabilities in old images.</p><p>Now create a file and name it \"Dockerfile\" and lets put the following instructions inside it:</p><p><strong>Dockerfile</strong></p><div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Start from the alpine image that is smaller but no fancy tools</span>\n<span class=\"token keyword\">FROM</span> alpine<span class=\"token punctuation\">:</span>3.13\n\n<span class=\"token comment\"># Use /usr/src/app as our workdir. The following instructions will be executed in this location.</span>\n<span class=\"token keyword\">WORKDIR</span> /usr/src/app\n\n<span class=\"token comment\"># Copy the hello.sh file from this location to /usr/src/app/ creating /usr/src/app/hello.sh</span>\n<span class=\"token keyword\">COPY</span> hello.sh .\n\n<span class=\"token comment\"># Alternatively, if we skipped chmod earlier, we can add execution permissions during the build.</span>\n<span class=\"token comment\"># RUN chmod +x hello.sh</span>\n\n<span class=\"token comment\"># When running docker run the command will be ./hello.sh</span>\n<span class=\"token keyword\">CMD</span> ./hello.sh</code></pre></div><text-box name=\"Permission denied\" variant=\"hint\"><p>If you're now getting \"/bin/sh: ./hello.sh: Permission denied\" it's because the <code class=\"language-text\">chmod +x hello.sh</code> was skipped earlier. You can simply uncomment the RUN instruction between COPY and CMD instructions</p></text-box><p>Great! By default <code class=\"language-text\">docker build</code> will look for a file named Dockerfile. Now we can run <code class=\"language-text\">docker build</code> with instructions where to build (<code class=\"language-text\">.</code>) and give it a name (<code class=\"language-text\">-t &lt;name&gt;</code>):</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker build . -t hello-docker\n  Sending build context to Docker daemon  54.78kB\n  Step 1/4 : FROM alpine:3.13\n   ---&gt; d6e46aa2470d\n  Step 2/4 : WORKDIR /usr/src/app\n   ---&gt; Running in bd0b4e349cb4\n  Removing intermediate container bd0b4e349cb4\n   ---&gt; b382ca27c182\n  Step 3/4 : COPY hello.sh .\n   ---&gt; 7fbc1b6e45ab\n  Step 4/4 : CMD ./hello.sh\n   ---&gt; Running in 24f28f026b3f\n  Removing intermediate container 24f28f026b3f\n   ---&gt; 444f21cf7bd5\n  Successfully built 444f21cf7bd5\n  Successfully tagged hello-docker:latest\n\n$ docker images\n  REPOSITORY            TAG          IMAGE ID       CREATED         SIZE\n  hello-docker          latest       444f21cf7bd5   2 minutes ago   5.57MB</code></pre></div><p>Now executing the application is as simple as running <code class=\"language-text\">docker run hello-docker</code>. Try it! During the build we see that there are multiple steps with hashes and intermediate containers. The steps here represent the layers so that each step is a new layer to the image.</p><p>The <strong>layers</strong> have multiple functions. We often try to limit the number of layers to save on storage space but layers can work as a cache during build time. If we just edit the last lines of Dockerfile the build command can start from the previous layer and skip straight to the section that has changed. COPY automatically detects changes in the files, so if we change the hello.sh it'll run from step 3/4, skipping 1 and 2. This can be used to create faster build pipelines. We'll talk more about optimization in part 3.</p><p>The intermediate containers are containers created from the image in which the command is executed. Then the changed state is stored into an image. We can do similiar task and a new layer manually. Create a new file called <code class=\"language-text\">additional.txt</code> and let's copy it inside the container and learn new trick while we're at it! We'll need two terminals so I will label the lines with 1 and 2 representing the two.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">1 $ docker run -it hello-docker sh\n1 /usr/src/app #</code></pre></div><p>Now we're inside of the container. We replaced the CMD we defined earlier with <code class=\"language-text\">sh</code> and used -i and -t to start the container so that we can interact with it. In the second terminal we will copy the file here.</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">2 $ docker ps\n2   CONTAINER ID   IMAGE          COMMAND   CREATED         STATUS         PORTS     NAMES\n    9c06b95e3e85   hello-docker   &quot;sh&quot;      4 minutes ago   Up 4 minutes             zen_rosalind\n\n2 $ touch additional.txt\n2 $ docker cp ./additional.txt zen_rosalind:/usr/src/app/</code></pre></div><p>I created the file with touch right before copying it in. Now it's there and we can confirm that with ls:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">1 /usr/src/app # ls\n1 additional.txt  hello.sh</code></pre></div><p>Great! Now we've made a change to the container. We can use <code class=\"language-text\">diff</code> to check what has changed</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">2 $ docker diff zen_rosalind\n    C /usr\n    C /usr/src\n    C /usr/src/app\n    A /usr/src/app/additional.txt\n    C /root\n    A /root/.ash_history</code></pre></div><p>The character in front of the file name indicates the type of the change in the container's filesystem: A = added, D = deleted, C = changed. The additional.txt was created and our <code class=\"language-text\">ls</code> created .ash_history. Next we will save the changes as a new layer!</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">2 $ docker commit zen_rosalind hello-docker-additional\n    sha256:2f63baa355ce5976bf89fe6000b92717f25dd91172aed716208e784315bfc4fd\n2 $ docker images\n    REPOSITORY                   TAG          IMAGE ID       CREATED          SIZE\n    hello-docker-additional      latest       2f63baa355ce   3 seconds ago    5.57MB\n    hello-docker                 latest       444f21cf7bd5   31 minutes ago   5.57MB</code></pre></div><p>We will actually never use docker commit again. This is because defining the changes to the Dockerfile is much more sustainable method of managing changes. No magic actions or scripts, just a Dockerfile that can be version controlled.</p><p>Let's do just that and create hello-docker with v2 tag that includes additional.txt.</p><p><strong>Dockerfile</strong></p><div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># Start from the alpine image</span>\n<span class=\"token keyword\">FROM</span> alpine<span class=\"token punctuation\">:</span>3.13\n\n<span class=\"token comment\"># Use /usr/src/app as our workdir. The following instructions will be executed in this location.</span>\n<span class=\"token keyword\">WORKDIR</span> /usr/src/app\n\n<span class=\"token comment\"># Copy the hello.sh file from this location to /usr/src/app/ creating /usr/src/app/hello.sh.</span>\n<span class=\"token keyword\">COPY</span> hello.sh .\n\n<span class=\"token comment\"># Execute a command with `/bin/sh -c` prefix.</span>\n<span class=\"token keyword\">RUN</span> touch additional.txt\n\n<span class=\"token comment\"># When running docker run the command will be ./hello.sh</span>\n<span class=\"token keyword\">CMD</span> ./hello.sh</code></pre></div><p>Build it with <code class=\"language-text\">docker build . -t hello-docker:v2</code> and we are done! Let's compare the output of ls:</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ docker run hello-docker-additional ls\n  additional.txt\n  hello.sh\n\n$ docker run hello-docker:v2 ls\n  additional.txt\n  hello.sh</code></pre></div><p>Now we know that all instructions in a Dockerfile <strong>except</strong> CMD (and one other that we will learn about soon) are executed during build time. <strong>CMD</strong> is executed when we call docker run, unless we overwrite it.</p><exercise name=\"Exercise 1.7: Two line Dockerfile\"><p>By default our <code class=\"language-text\">devopsdockeruh/simple-web-service:alpine</code> doesn't have a CMD. It instead uses <em>ENTRYPOINT</em> to declare which application is run.</p><p>We'll talk more about <em>ENTRYPOINT</em> in the next section, but you already know that the last argument in <code class=\"language-text\">docker run</code> can be used to give command.</p><p>As you might've noticed it doesn't start the web service even though the name is \"simple-web-service\". A command is needed to start the server!</p><p>Try <code class=\"language-text\">docker run devopsdockeruh/simple-web-service:alpine hello</code>. The application reads the argument but will inform that hello isn't accepted.</p><p>In this exercise create a Dockerfile and use FROM and CMD to create a brand new image that automatically runs the server.\nTag the new image as \"web-server\"</p><p>Return the Dockerfile and the command you used to run the container.</p><p>Running the built \"web-server\" image should look like this:</p><div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">$ docker run web-server\n[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.\n\n[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.\n- using env:   export GIN_MODE=release\n- using code:  gin.SetMode(gin.ReleaseMode)\n\n[GIN-debug] GET    /*path                    --&gt; server.Start.func1 (3 handlers)\n[GIN-debug] Listening and serving HTTP on :8080</code></pre></div><ul>\n<li>\n<p>We don't have any method of accessing the web service yet. As such confirming that the console output is the same will suffice.</p>\n</li>\n<li>\n<p>The exercise title may be a useful hint here.</p>\n</li>\n</ul></exercise><exercise name=\"Exercise 1.8: Image for script\"><p>We can improve our previous solutions now that we know how to create and build a Dockerfile.</p><p>Create a new file on your local machine with and append the script we used previously into that file</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">echo &quot;Input website:&quot;; read website; echo &quot;Searching..&quot;; sleep 1; curl http://$website;</code></pre></div><p>Create a Dockerfile for a new image that starts from ubuntu:20.04 and add instructions to install curl into that image. Then add instructions to copy the script file into that image and finally set it to run on container start using CMD.</p><p>After you have filled the Dockerfile, build the image with the tag \"curler\".</p><ul>\n<li>If you are getting permission denied, use <code class=\"language-text\">chmod</code> to give permission to run the script.</li>\n</ul><p>The following should now work:</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker run -it curler\n\n  Input website:\n  helsinki.fi\n  Searching<span class=\"token punctuation\">..</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>DOCTYPE HTML PUBLIC <span class=\"token string\">\"-//IETF//DTD HTML 2.0//EN\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token number\">301</span> Moved Permanently<span class=\"token operator\">&lt;</span>/title<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>/head<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>Moved Permanently<span class=\"token operator\">&lt;</span>/h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>\n  <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>The document has moved <span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\"https://www.helsinki.fi/\"</span><span class=\"token operator\">></span>here<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span>.<span class=\"token operator\">&lt;</span>/p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">></span></code></pre></div><p>Submit the Dockerfile.</p></exercise></div>","frontmatter":{"path":"/part-1/3-in-depth-dive-to-images","title":"In-depth dive to images"},"fileAbsolutePath":"/home/runner/work/dockeruh/dockeruh/data/part-1/section-3.md"},"allPages":{"edges":[{"node":{"id":"78fbcd97-1206-5e2c-aa7a-2355c7d3d2d4","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"8ce67b08-bc98-57f2-97c3-34c31cef920c","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"9586f0d5-0847-5609-8ce9-783dec1c6474","frontmatter":{"path":"/getting-started","title":"Getting started"}}},{"node":{"id":"586d3cc5-6375-5cc3-a380-fa7c92c444f6","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"570cbdcb-35dd-597d-9296-1db787f1a2ba","frontmatter":{"path":"/links","title":"Links"}}},{"node":{"id":"6482c1de-336e-5ca0-921c-2f872710464e","frontmatter":{"path":"/part-1","title":"Part 1"}}},{"node":{"id":"fb43a603-5b9d-5661-b6b9-54da7d539cda","frontmatter":{"path":"/part-1/1-getting-started","title":"Definitions and basic concepts"}}},{"node":{"id":"931e4820-9cf8-57ce-841f-8928fba4448e","frontmatter":{"path":"/part-1/2-running-and-stopping","title":"Running and stopping containers"}}},{"node":{"id":"a5745d79-06c3-53ab-b41e-c258cbaaa39e","frontmatter":{"path":"/part-1/3-in-depth-dive-to-images","title":"In-depth dive to images"}}},{"node":{"id":"6777342e-aa39-5b24-b2a4-b3b257720a3e","frontmatter":{"path":"/part-1/4-defining-start-conditions","title":"Defining start conditions for the container"}}},{"node":{"id":"838a3df5-a468-5c55-804e-320698936a5b","frontmatter":{"path":"/part-1/5-volumes-and-ports","title":"Interacting with the container via volumes and ports"}}},{"node":{"id":"f9b46527-28d1-55c3-b6a3-9cf078f68442","frontmatter":{"path":"/part-1/6-docker-hub","title":"Utilizing tools from the Registry"}}},{"node":{"id":"03d57907-e399-59e1-b31f-2f5c4cae8364","frontmatter":{"path":"/part-1/7-summary","title":"Summary"}}},{"node":{"id":"abbbb192-1233-556c-be2b-99ddd8018805","frontmatter":{"path":"/part-2","title":"Part 2"}}},{"node":{"id":"cdd6ac14-8e15-5a14-96fc-0db85aaa96e1","frontmatter":{"path":"/part-2/1-migrating-to-docker-compose","title":"Migrating to docker compose"}}},{"node":{"id":"5e98e3a7-4c6d-5e74-b362-9214ca8667c6","frontmatter":{"path":"/part-2/2-docker-networking","title":"Docker networking"}}},{"node":{"id":"b76d6612-47f0-51df-8502-9c8cafd28daa","frontmatter":{"path":"/part-2/3-volumes-in-action","title":"Volumes in action"}}},{"node":{"id":"488142c8-3933-505b-9676-b0616b850285","frontmatter":{"path":"/part-2/4-containers-in-development","title":"Containers in development"}}},{"node":{"id":"6d4f48ee-6029-5e85-860c-bcc63886ef6e","frontmatter":{"path":"/part-2/5-summary","title":"Summary"}}},{"node":{"id":"917133c7-7a4a-5fd3-8d8e-32c8c87ace46","frontmatter":{"path":"/part-3","title":"Part 3"}}},{"node":{"id":"bdcd9fef-a7d9-5fa9-9e83-690be6709487","frontmatter":{"path":"/part-3/1-deeper-understainding-of-containers","title":"Deeper understanding of containers"}}},{"node":{"id":"3269eaff-51d8-510c-bb92-49a46373f01c","frontmatter":{"path":"/part-3/2-deployment-pipelines","title":"Deployment pipelines"}}},{"node":{"id":"e38e2740-2353-5423-8f22-0381c1d6a859","frontmatter":{"path":"/part-3/3-using-non-root-user","title":"Using a non-root user"}}},{"node":{"id":"b809a602-38d5-55b0-91a1-469bc8d243b8","frontmatter":{"path":"/part-3/4-optimizing-the-image-size","title":"Optimizing the image size"}}},{"node":{"id":"3c8a8394-d799-5af0-9f92-fc70f5dd3625","frontmatter":{"path":"/part-3/5-multi-host-environments","title":"Multi-host environments"}}},{"node":{"id":"ab1ed629-bddc-5dbc-9f88-a3559da3b882","frontmatter":{"path":"/part-3/6-end","title":"End"}}}]}},"pageContext":{}},"staticQueryHashes":["3294351120","994120085"]}